// TaskFlow - Prisma Schema for SQL Server
// Team Task & Project Manager Database Schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// User Model - Authentication & Profile
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Hashed password for credentials login
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  ownedProjects Project[] @relation("ProjectOwner")
  memberProjects ProjectMember[]
  assignedTasks Task[]    @relation("TaskAssignee")
  createdTasks  Task[]    @relation("TaskCreator")
  comments      Comment[]
  notifications Notification[]
  activities    Activity[]

  @@map("users")
}

// NextAuth Account Model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session Model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth Verification Token Model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Project Model
model Project {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  color       String?  @default("#6366f1") // Project color theme
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner   User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members ProjectMember[]
  boards  Board[]
  activities Activity[]

  @@map("projects")
}

// Project Members - Join Table
model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String   @default("member") // owner, admin, member, viewer
  joinedAt  DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([projectId, userId])
  @@map("project_members")
}

// Board Model (Task Lists - To Do, In Progress, Done, etc.)
model Board {
  id        String   @id @default(cuid())
  title     String
  position  Int      // Order of boards in project
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@map("boards")
}

// Task Model
model Task {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  position    Int       // Order of tasks within board
  priority    String    @default("medium") // low, medium, high, urgent
  status      String    @default("todo") // todo, in_progress, done
  dueDate     DateTime?
  boardId     String
  assigneeId  String?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  // Relations
  board       Board     @relation(fields: [boardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignee    User?     @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  createdBy   User      @relation("TaskCreator", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  attachments Attachment[]
  comments    Comment[]

  @@map("tasks")
}

// Task Comments
model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("comments")
}

// Task Attachments
model Attachment {
  id        String   @id @default(cuid())
  fileName  String
  fileUrl   String
  fileSize  Int
  fileType  String
  taskId    String
  createdAt DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  type      String   // task_assigned, task_completed, task_comment, member_added, etc.
  title     String
  message   String   @db.Text
  read      Boolean  @default(false)
  userId    String
  link      String?  // Link to relevant resource
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Activity Log
model Activity {
  id        String   @id @default(cuid())
  type      String   // created, updated, deleted, moved, assigned, etc.
  entity    String   // project, board, task
  entityId  String
  userId    String
  projectId String
  details   String?  @db.Text
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("activities")
}
